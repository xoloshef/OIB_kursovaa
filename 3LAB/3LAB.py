# ЛАБОРАТОРНАЯ РАБОТА № 3. МНОГОАЛФАВИТНАЯ МНОГОКОНТУРНАЯ ПОДСТАНОВКА

alphabet = ['а', 'б', 'в', 'г', 'д', 'е', 'ё', 'ж', 'з', 'и', 'й', 'к', 'л', 'м', 'н', 'о', 'п', 'р', 'с', 'т', 'у', 'ф', 'х', 'ц', 'ч', 'ш', 'щ', 'ъ', 'ы', 'ь', 'э', 'ю', 'я', ' ', ', ', '.', 'А', 'Б', 'В', 'Г', 'Д', 'Е', 'Ё', 'Ж', 'З', 'И', 'Й', 'К', 'Л', 'М', 'Н', 'О', 'П', 'Р', 'С', 'Т', 'У', 'Ф', 'Х', 'Ц', 'Ч', 'Ш', 'Щ', 'Ъ', 'Ы', 'Ь', 'Э', 'Ю', 'Я']
alphabet1 = ['з', 'и', 'й', 'к', 'л', 'м', 'н', 'о', 'п', 'р', 'с', 'т', 'у', 'ф', 'х', 'ц', 'ч', 'ш', 'щ', 'ъ', 'ы', 'ь', 'э', 'ю', 'я', ' ', ', ', '.', 'А', 'Б', 'В', 'Г', 'Д', 'Е', 'Ё', 'Ж', 'З', 'И', 'Й', 'К', 'Л', 'М', 'Н', 'О', 'П', 'Р', 'С', 'Т', 'У', 'Ф', 'Х', 'Ц', 'Ч', 'Ш', 'Щ', 'Ъ', 'Ы', 'Ь', 'Э', 'Ю', 'Я', 'а', 'б', 'в', 'г', 'д', 'е', 'ё', 'ж']
alphabet2 = ['п', 'р', 'с', 'т', 'у', 'ф', 'х', 'ц', 'ч', 'ш', 'щ', 'ъ', 'ы', 'ь', 'э', 'ю', 'я', ' ', ', ', '.', 'А', 'Б', 'В', 'Г', 'Д', 'Е', 'Ё', 'Ж', 'З', 'И', 'Й', 'К', 'Л', 'М', 'Н', 'О', 'П', 'Р', 'С', 'Т', 'У', 'Ф', 'Х', 'Ц', 'Ч', 'Ш', 'Щ', 'Ъ', 'Ы', 'Ь', 'Э', 'Ю', 'Я', 'а', 'б', 'в', 'г', 'д', 'е', 'ё', 'ж', 'з', 'и', 'й', 'к', 'л', 'м', 'н', 'о']
alphabet3 = ['ч', 'ш', 'щ', 'ъ', 'ы', 'ь', 'э', 'ю', 'я', ' ', ', ', '.', 'А', 'Б', 'В', 'Г', 'Д', 'Е', 'Ё', 'Ж', 'З', 'И', 'Й', 'К', 'Л', 'М', 'Н', 'О', 'П', 'Р', 'С', 'Т', 'У', 'Ф', 'Х', 'Ц', 'Ч', 'Ш', 'Щ', 'Ъ', 'Ы', 'Ь', 'Э', 'Ю', 'Я', 'а', 'б', 'в', 'г', 'д', 'е', 'ё', 'ж', 'з', 'и', 'й', 'к', 'л', 'м', 'н', 'о', 'п', 'р', 'с', 'т', 'у', 'ф', 'х', 'ц']

text = input("Введите сообщение: \n")
key = int(input("Введите ключ шифрования: "))

def encrypted(t):
    z = 0
    k = 66
    ret = []
    for x in text:
        if x in alphabet:
            if (z % 3) == 0:
                id_izh = alphabet.index(x)
                id = id_izh + key % (k - 1)

                id = id_izh + key % (k - 1)

                ret += alphabet1[id]
            elif (z % 3) == 1:
                id_izh = alphabet.index(x)
                id = id_izh + key % (k - 1)
                ret += alphabet2[id]
            elif (z % 3) == 2:
                id_izh = alphabet.index(x)
                id = id_izh + key % (k - 1)
                ret += alphabet3[id]
            z = z + 1
        else:
            ret += x
    sret = ''.join(ret)
    return sret


def decrypted(t):
    z = 0
    y = 0
    k = 66
    ret = []
    for x in entext:
        z = z + 1
    while y != z:
        for x in entext:
            if (y % 3) == 0:
                if x in alphabet1:
                    id_izh = alphabet1.index(x)
                    id = id_izh - key % (k - 1)
                    ret += alphabet[id]
                    y = y + 1
            elif (y % 3) == 1:
                if x in alphabet2:
                    id_izh = alphabet2.index(x)
                    id = id_izh - key % (k - 1)
                    ret += alphabet[id]
                    y = y + 1
            elif (y % 3) == 2:
                if x in alphabet3:
                    id_izh = alphabet3.index(x)
                    id = id_izh - key % (k - 1)
                    ret += alphabet[id]
                    y = y + 1
            else:
                ret += x
        sret = ''.join(ret)
        return sret


entext = encrypted(text)
print("Зашифрованное сообщение:\n", entext)
detext = decrypted(entext)
print("Расшифрованное сообщение:\n", detext)

""" Вариант 28
При построении системы безопасности применяются политики защиты основанные на требованиях определяемых направлениями деятельности компании


id = id_izh + key mod (k-1)
id - id символа зашифрованного текста,
id_izh - id символа исходного текста,
key - целое число в диапазоне 0 - (k-1),
k - число символов используемого алфавита. 69
"""